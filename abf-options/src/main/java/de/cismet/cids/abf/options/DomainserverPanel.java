/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.abf.options;

import org.apache.log4j.Logger;

import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;

/**
 * DOCUMENT ME!
 *
 * @version  $Revision$, $Date$
 */
final class DomainserverPanel extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    public static final String PROP_DOMAINSERVER_USER_REFRESH_POLICY = "__prop_domainserver_user_refresh_policy__"; // NOI18N

    private static final transient Logger LOG = Logger.getLogger(DomainserverPanel.class);

    //~ Enums ------------------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    public enum UserRefreshPolicy {

        //~ Enum constants -----------------------------------------------------

        AUTO, MANUAL
    }

    //~ Instance fields --------------------------------------------------------

    private final DomainserverOptionsPanelController controller;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final transient javax.swing.Box.Filler filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
            new java.awt.Dimension(0, 0),
            new java.awt.Dimension(0, 0));
    private final transient javax.swing.Box.Filler filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
            new java.awt.Dimension(0, 0),
            new java.awt.Dimension(0, 32767));
    private final transient javax.swing.Box.Filler filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
            new java.awt.Dimension(0, 0),
            new java.awt.Dimension(0, 0));
    private final transient javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
    private final transient javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
    private final transient javax.swing.JPanel jPanel3 = new javax.swing.JPanel();
    private final transient javax.swing.JPanel jPanel4 = new javax.swing.JPanel();
    private final transient javax.swing.JLabel lblLogging = new javax.swing.JLabel();
    private final transient javax.swing.JLabel lblLogging1 = new javax.swing.JLabel();
    private final transient javax.swing.ButtonGroup rbgUserRefresh = new javax.swing.ButtonGroup();
    private final transient javax.swing.JRadioButton rdbAuto = new javax.swing.JRadioButton();
    private final transient javax.swing.JRadioButton rdbManual = new javax.swing.JRadioButton();
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates a new LoggingPanel object.
     *
     * @param  model  DOCUMENT ME!
     */
    DomainserverPanel(final DomainserverOptionsPanelController model) {
        this.controller = model;

        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        setBackground(new java.awt.Color(0, 0, 0));
        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        jPanel1.setOpaque(false);
        jPanel1.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(filler1, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblLogging,
            NbBundle.getMessage(DomainserverPanel.class, "DomainserverPanel.lblLogging.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel1.add(lblLogging, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 1));
        jPanel2.setMinimumSize(new java.awt.Dimension(12, 1));
        jPanel2.setPreferredSize(new java.awt.Dimension(12, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        jPanel1.add(jPanel2, gridBagConstraints);

        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel3.add(filler3, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblLogging1,
            NbBundle.getMessage(DomainserverPanel.class, "DomainserverPanel.lblLogging1.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 5);
        jPanel3.add(lblLogging1, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel4.setMaximumSize(new java.awt.Dimension(32767, 1));
        jPanel4.setMinimumSize(new java.awt.Dimension(12, 1));
        jPanel4.setPreferredSize(new java.awt.Dimension(12, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 10, 5);
        jPanel3.add(jPanel4, gridBagConstraints);

        rbgUserRefresh.add(rdbAuto);
        org.openide.awt.Mnemonics.setLocalizedText(
            rdbAuto,
            NbBundle.getMessage(DomainserverPanel.class, "DomainserverPanel.rdbAuto.text"));                           // NOI18N
        rdbAuto.setToolTipText(NbBundle.getMessage(DomainserverPanel.class, "DomainserverPanel.rdbAuto.toolTipText")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel3.add(rdbAuto, gridBagConstraints);

        rbgUserRefresh.add(rdbManual);
        org.openide.awt.Mnemonics.setLocalizedText(
            rdbManual,
            NbBundle.getMessage(DomainserverPanel.class, "DomainserverPanel.rdbManual.text")); // NOI18N
        rdbManual.setToolTipText(NbBundle.getMessage(
                DomainserverPanel.class,
                "DomainserverPanel.rdbManual.toolTipText"));                                   // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel3.add(rdbManual, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
        jPanel1.add(jPanel3, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jPanel1, gridBagConstraints);

        filler2.setMaximumSize(new java.awt.Dimension(0, 32767));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.weighty = 1.0;
        add(filler2, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     */
    void load() {
        final String policyString = NbPreferences.forModule(DomainserverPanel.class)
                    .get(PROP_DOMAINSERVER_USER_REFRESH_POLICY, "AUTO"); // NOI18N
        UserRefreshPolicy level = UserRefreshPolicy.AUTO;

        try {
            level = UserRefreshPolicy.valueOf(policyString);
        } catch (final IllegalArgumentException e) {
            LOG.warn("cannot load policy from preferences: " + policyString, e); // NOI18N
        }

        if (UserRefreshPolicy.AUTO.equals(level)) {
            rdbAuto.setSelected(true);
        } else {
            rdbManual.setSelected(true);
        }
    }

    /**
     * DOCUMENT ME!
     */
    void store() {
        final String policyString;
        if (rdbAuto.isSelected()) {
            policyString = UserRefreshPolicy.AUTO.toString();
        } else {
            policyString = UserRefreshPolicy.MANUAL.toString();
        }
        NbPreferences.forModule(DomainserverPanel.class).put(PROP_DOMAINSERVER_USER_REFRESH_POLICY, policyString);
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    boolean valid() {
        return true;
    }
}
