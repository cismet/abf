/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.abf.options;

import org.apache.log4j.Logger;

import org.openide.util.NbBundle;
import org.openide.util.NbPreferences;
import org.openide.util.WeakListeners;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;

import javax.swing.JComboBox;

/**
 * DOCUMENT ME!
 *
 * @version  $Revision$, $Date$
 */
final class LoggingPanel extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    public static final String PROP_LOGLEVEL = "loglevel";

    private static final transient Logger LOG = Logger.getLogger(LoggingPanel.class);

    //~ Enums ------------------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private enum LogLevel {

        //~ Enum constants -----------------------------------------------------

        DEBUG, INFO, WARN, ERROR, FATAL, OFF;
    }

    //~ Instance fields --------------------------------------------------------

    private final LoggingOptionsPanelController controller;
    private final ItemListener logLevelL;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final transient javax.swing.JComboBox cboLogLevel = new JComboBox(LogLevel.values());
    private final transient javax.swing.JLabel lblLogLevel = new javax.swing.JLabel();
    private final transient javax.swing.JPanel pnlLogLevel = new javax.swing.JPanel();
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates a new LoggingPanel object.
     *
     * @param  controller  DOCUMENT ME!
     */
    LoggingPanel(final LoggingOptionsPanelController controller) {
        this.controller = controller;
        this.logLevelL = new LogLevelItemListener();

        initComponents();

        cboLogLevel.addItemListener(WeakListeners.create(ItemListener.class, logLevelL, cboLogLevel));
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        setOpaque(false);
        setLayout(new java.awt.GridBagLayout());

        pnlLogLevel.setBorder(javax.swing.BorderFactory.createTitledBorder(
                NbBundle.getMessage(LoggingPanel.class, "LoggingPanel.pnlLogLevel.border.title"))); // NOI18N
        pnlLogLevel.setOpaque(false);
        pnlLogLevel.setLayout(new java.awt.GridBagLayout());

        cboLogLevel.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    cboLogLevelActionPerformed(evt);
                }
            });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlLogLevel.add(cboLogLevel, gridBagConstraints);

        org.openide.awt.Mnemonics.setLocalizedText(
            lblLogLevel,
            NbBundle.getMessage(LoggingPanel.class, "LoggingPanel.lblLogLevel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        pnlLogLevel.add(lblLogLevel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(pnlLogLevel, gridBagConstraints);
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void cboLogLevelActionPerformed(final java.awt.event.ActionEvent evt) //GEN-FIRST:event_cboLogLevelActionPerformed
    {                                                                             //GEN-HEADEREND:event_cboLogLevelActionPerformed
                                                                                  // TODO add your handling code here:
    }                                                                             //GEN-LAST:event_cboLogLevelActionPerformed

    /**
     * DOCUMENT ME!
     */
    void load() {
        final String loglevel = NbPreferences.forModule(LoggingPanel.class).get(PROP_LOGLEVEL, "DEBUG"); // NOI18N
        LogLevel level = LogLevel.DEBUG;

        try {
            level = LogLevel.valueOf(loglevel);
        } catch (final IllegalArgumentException e) {
            LOG.warn("cannot load loglevel from preferences: " + loglevel, e); // NOI18N
        }

        cboLogLevel.setSelectedItem(level);
    }

    /**
     * DOCUMENT ME!
     */
    void store() {
        final String loglevel = cboLogLevel.getSelectedItem().toString();
        NbPreferences.forModule(LoggingPanel.class).put(PROP_LOGLEVEL, loglevel); // NOI18N
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class LogLevelItemListener implements ItemListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void itemStateChanged(final ItemEvent e) {
            controller.changed();
        }
    }
}
