package de.cismet.cids.abf.cidsjavatemplate;

import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.netbeans.spi.project.ui.support.ProjectChooser;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;
import org.openide.filesystems.FileUtil;

public final class CidsJavaTemplatePanelVisual extends JPanel implements
        DocumentListener
{
    
    public static final String PROP_PROJECT_NAME = "projectName"; // NOI18N
    
    private final transient CidsJavaTemplateWizardPanel panel;
    private transient File choosen;
    
    /** Creates new form PanelProjectLocationVisual */
    public CidsJavaTemplatePanelVisual(final CidsJavaTemplateWizardPanel panel)
    {
        initComponents();
        this.panel = panel;
        // Register listener on the textFields to make the automatic updates
        txtProjectName.getDocument().addDocumentListener(this);
        txtDistLocation.getDocument().addDocumentListener(this);
    }
    
    public String getProjectName()
    {
        return txtProjectName.getText();
    }
    
    File getChoosenFile()
    {
        return choosen;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblProjectName.setLabelFor(txtProjectName);
        org.openide.awt.Mnemonics.setLocalizedText(lblProjectName, org.openide.util.NbBundle.getMessage(CidsJavaTemplatePanelVisual.class, "lbl_projectName")); // NOI18N

        lblDistLocation.setLabelFor(txtDistLocation);
        org.openide.awt.Mnemonics.setLocalizedText(lblDistLocation, org.openide.util.NbBundle.getMessage(CidsJavaTemplatePanelVisual.class, "lbl_distLocation")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(btnBrowse, org.openide.util.NbBundle.getMessage(CidsJavaTemplatePanelVisual.class, "Btn_browse")); // NOI18N
        btnBrowse.setActionCommand("BROWSE");
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        lblProjectFolder.setLabelFor(txtProjectFolder);
        org.openide.awt.Mnemonics.setLocalizedText(lblProjectFolder, org.openide.util.NbBundle.getMessage(CidsJavaTemplatePanelVisual.class, "lbl_projectFolder")); // NOI18N

        txtProjectFolder.setEditable(false);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(lblProjectName)
                    .add(lblDistLocation)
                    .add(lblProjectFolder))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, txtProjectName, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, txtDistLocation, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, txtProjectFolder, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(btnBrowse)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblProjectName)
                    .add(txtProjectName, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblDistLocation)
                    .add(txtDistLocation, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(btnBrowse))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(lblProjectFolder)
                    .add(txtProjectFolder, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(213, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        final JFileChooser chooser = new JFileChooser();
        FileUtil.preventFileChooserSymlinkTraversal(chooser, null);
        chooser.setDialogTitle(org.openide.util.NbBundle.getMessage(CidsJavaTemplatePanelVisual.class, "Dsc_chooseDist"));
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        final String path = this.txtDistLocation.getText();
        if(path.length() > 0)
        {
            final File f = new File(path);
            if(f.exists())
            {
                chooser.setSelectedFile(f);
            }
        }
        if(JFileChooser.APPROVE_OPTION == chooser.showOpenDialog(this))
        {
            choosen = chooser.getSelectedFile();
            txtDistLocation.setText(FileUtil.normalizeFile(
                    choosen).getAbsolutePath());
        }
        panel.fireChangeEvent();
    }//GEN-LAST:event_btnBrowseActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final transient javax.swing.JButton btnBrowse = new javax.swing.JButton();
    private final transient javax.swing.JLabel lblDistLocation = new javax.swing.JLabel();
    private final transient javax.swing.JLabel lblProjectFolder = new javax.swing.JLabel();
    private final transient javax.swing.JLabel lblProjectName = new javax.swing.JLabel();
    private final transient javax.swing.JTextField txtDistLocation = new javax.swing.JTextField();
    private final transient javax.swing.JTextField txtProjectFolder = new javax.swing.JTextField();
    private final transient javax.swing.JTextField txtProjectName = new javax.swing.JTextField();
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void addNotify()
    {
        super.addNotify();
        //same problem as in 31086, initial focus on Cancel button
        txtProjectName.requestFocus();
    }
    
    boolean valid(final WizardDescriptor wizardDescriptor)
    {
        
        if (txtProjectName.getText().length() == 0)
        {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                    org.openide.util.NbBundle.getMessage(
                    CidsJavaTemplatePanelVisual.class, 
                    "Dsc_projectNameNotValid")); // NOI18N
            return false; // Display name not specified
        }
        final File f = FileUtil.normalizeFile(
                new File(txtDistLocation.getText()).getAbsoluteFile());
        if(!f.isDirectory())
        {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                    org.openide.util.NbBundle.getMessage(
                    CidsJavaTemplatePanelVisual.class, 
                    "Dsc_projectFolderPathNotValid")); // NOI18N
            return false;
        }
        final File destFolder = FileUtil.normalizeFile(
                new File(txtProjectFolder.getText()).getAbsoluteFile());
        File projLoc = destFolder;
        while(projLoc != null && !projLoc.exists())
        {
            projLoc = projLoc.getParentFile();
        }
        if(projLoc == null || !projLoc.canWrite())
        {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                    org.openide.util.NbBundle.getMessage(
                    CidsJavaTemplatePanelVisual.class, 
                    "Dsc_projectFolderUncreateable")); // NOI18N
            return false;
        }
        if(FileUtil.toFileObject(projLoc) == null)
        {
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                    org.openide.util.NbBundle.getMessage(
                    CidsJavaTemplatePanelVisual.class, 
                    "Dsc_projectFolderPathNotValid")); // NOI18N
            return false;
        }
        
        final File[] kids = destFolder.listFiles();
        if (destFolder.exists() && kids != null && kids.length > 0)
        {
            // Folder exists and is not empty
            wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                    org.openide.util.NbBundle.getMessage(
                    CidsJavaTemplatePanelVisual.class, 
                    "Dsc_projectFolderExistsAndNotEmpty")); // NOI18N
            return false;
        }
        wizardDescriptor.putProperty(WizardDescriptor.PROP_ERROR_MESSAGE,
                ""); // NOI18N
        return true;
    }
    
    void store(final WizardDescriptor d)
    {
        final String name = txtProjectName.getText().trim();
        final String folder = txtProjectFolder.getText().trim();
        final File projDir = new File(folder);
        d.putProperty("projdir", projDir); // NOI18N
        d.putProperty("name", name); // NOI18N
    }
    
    void read(final WizardDescriptor settings)
    {
        File distLocation = (File)settings.getProperty("projdir"); // NOI18N
        if(distLocation == null
                || distLocation.getParentFile() == null
                || !distLocation.getParentFile().isDirectory())
        {
            distLocation = ProjectChooser.getProjectsFolder();
            // should be subdir of distribution
            if(distLocation.getName().equals("java") // NOI18N
                    && distLocation.getParentFile()
                    .getName().equals("src")) // NOI18N
            {
                distLocation = distLocation
                        .getParentFile()
                        .getParentFile()
                        .getParentFile()
                        .getParentFile();
            }
        }else
        {
            // projDir should be subfolder of distribution
            distLocation = distLocation
                    .getParentFile()
                    .getParentFile()
                    .getParentFile()
                    .getParentFile()
                    .getParentFile();
        }
        choosen = distLocation;
        txtDistLocation.setText(distLocation.getAbsolutePath());
        String projectName = (String) settings.getProperty("name"); // NOI18N
        if(projectName == null)
        {
            projectName = "cids Java Template"; // NOI18N
        }
        txtProjectName.setText(projectName);
        txtProjectName.selectAll();
        panel.fireChangeEvent();
    }
    
    void validate(final WizardDescriptor d) throws WizardValidationException
    {
        // nothing to validate
    }
    
    // Implementation of DocumentListener --------------------------------------
    
    @Override
    public void changedUpdate(final DocumentEvent e)
    {
        updateTexts(e);
        if(txtProjectName.getDocument() == e.getDocument())
        {
            firePropertyChange(
                    PROP_PROJECT_NAME, null, txtProjectName.getText());
        }
    }

    @Override
    public void insertUpdate(final DocumentEvent e)
    {
        updateTexts(e);
        if(txtProjectName.getDocument() == e.getDocument())
        {
            firePropertyChange(
                    PROP_PROJECT_NAME, null, txtProjectName.getText());
        }
    }

    @Override
    public void removeUpdate(final DocumentEvent e)
    {
        updateTexts(e);
        if(txtProjectName.getDocument() == e.getDocument())
        {
            firePropertyChange(
                    PROP_PROJECT_NAME, null, txtProjectName.getText());
        }
    }
    
    /** Handles changes in the Project name and project directory, */
    private void updateTexts(final DocumentEvent e)
    {
        final Document doc = e.getDocument();
        if(doc == txtProjectName.getDocument()
                || doc == txtDistLocation.getDocument())
        {
            // Change in the project name
            final String projectName = txtProjectName.getText();
            final String projectFolder = txtDistLocation.getText();
            final StringBuffer path = new StringBuffer();
            path.append(File.separatorChar)
                    .append("lib") // NOI18N
                    .append(File.separatorChar)
                    .append("local") // NOI18N
                    .append(File.separatorChar)
                    .append("src") // NOI18N
                    .append(File.separatorChar)
                    .append("java") // NOI18N
                    .append(File.separatorChar);
            txtProjectFolder.setText(projectFolder + path.toString() +
                    projectName);
        }
        panel.fireChangeEvent(); // Notify that the panel changed
    }
}