/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 *  Copyright (C) 2010 mscholl
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package de.cismet.cids.abf.distribution;

import org.openide.util.NbBundle;

import java.awt.EventQueue;

import java.io.File;

import java.util.regex.Matcher;

import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

/**
 * DOCUMENT ME!
 *
 * @version  $Revision$, $Date$
 */
public final class EditDistributionVisualPanel3 extends JPanel {

    //~ Instance fields --------------------------------------------------------

    private final transient EditDistributionWizardPanel3 model;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JLabel lblCreatedDir;
    private javax.swing.JLabel lblDistName;
    private javax.swing.JLabel lblOutDir;
    private javax.swing.JTextField txtCreatedDir;
    private javax.swing.JTextField txtDistName;
    private javax.swing.JTextField txtOutDir;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form EditDistributionVisualPanel3.
     *
     * @param  model  DOCUMENT ME!
     */
    public EditDistributionVisualPanel3(final EditDistributionWizardPanel3 model) {
        this.model = model;
        initComponents();

        txtDistName.setDocument(new NameDocument());
        txtOutDir.setDocument(new OutDirDocument());
        txtDistName.getDocument().addDocumentListener(new CreatedDirUpdateListener());
        txtOutDir.getDocument().addDocumentListener(new CreatedDirUpdateListener());
        txtCreatedDir.getDocument().addDocumentListener(new DocumentListener() {

                @Override
                public void insertUpdate(final DocumentEvent e) {
                    model.fireChangeEvent();
                }

                @Override
                public void removeUpdate(final DocumentEvent e) {
                    model.fireChangeEvent();
                }

                @Override
                public void changedUpdate(final DocumentEvent e) {
                    model.fireChangeEvent();
                }
            });
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    void init() {
        final String createdPath = model.getCreatedPath();
        if ((createdPath == null) || createdPath.isEmpty()) {
            txtDistName.setText("cidsDistribution");           // NOI18N
            txtOutDir.setText(System.getProperty("user.dir")); // NOI18N
        } else {
            final String name = createdPath.substring(createdPath.lastIndexOf(File.separatorChar));
            final String path = createdPath.substring(0, createdPath.lastIndexOf(File.separatorChar));
            txtDistName.setText(name);
            txtOutDir.setText(path);
        }
    }
    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    String getDistName() {
        return txtDistName.getText();
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    String getOutDir() {
        return txtOutDir.getText();
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    String getCreatedDir() {
        return txtCreatedDir.getText();
    }

    @Override
    public String getName() {
        return "Distribution information";
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        lblDistName = new javax.swing.JLabel();
        txtDistName = new javax.swing.JTextField();
        lblOutDir = new javax.swing.JLabel();
        txtOutDir = new javax.swing.JTextField();
        btnBrowse = new javax.swing.JButton();
        lblCreatedDir = new javax.swing.JLabel();
        txtCreatedDir = new javax.swing.JTextField();

        org.openide.awt.Mnemonics.setLocalizedText(
            lblDistName,
            NbBundle.getMessage(EditDistributionVisualPanel3.class, "EditDistributionVisualPanel3.lblDistName.text")); // NOI18N

        txtDistName.setText(NbBundle.getMessage(
                EditDistributionVisualPanel3.class,
                "EditDistributionVisualPanel3.txtDistName.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(
            lblOutDir,
            NbBundle.getMessage(EditDistributionVisualPanel3.class, "EditDistributionVisualPanel3.lblOutDir.text")); // NOI18N

        txtOutDir.setText(NbBundle.getMessage(
                EditDistributionVisualPanel3.class,
                "EditDistributionVisualPanel3.txtOutDir.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(
            btnBrowse,
            NbBundle.getMessage(EditDistributionVisualPanel3.class, "EditDistributionVisualPanel3.btnBrowse.text")); // NOI18N
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    btnBrowseActionPerformed(evt);
                }
            });

        org.openide.awt.Mnemonics.setLocalizedText(
            lblCreatedDir,
            NbBundle.getMessage(EditDistributionVisualPanel3.class, "EditDistributionVisualPanel3.lblCreatedDir.text")); // NOI18N

        txtCreatedDir.setEditable(false);
        txtCreatedDir.setText(NbBundle.getMessage(
                EditDistributionVisualPanel3.class,
                "EditDistributionVisualPanel3.txtCreatedDir.text")); // NOI18N

        final javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                layout.createSequentialGroup().addContainerGap().addGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(lblDistName)
                                .addComponent(lblOutDir).addComponent(lblCreatedDir)).addPreferredGap(
                    javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(
                        javax.swing.GroupLayout.Alignment.LEADING,
                        layout.createSequentialGroup().addComponent(
                            txtOutDir,
                            javax.swing.GroupLayout.DEFAULT_SIZE,
                            226,
                            Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(btnBrowse)).addComponent(
                        txtDistName,
                        javax.swing.GroupLayout.Alignment.LEADING,
                        javax.swing.GroupLayout.DEFAULT_SIZE,
                        323,
                        Short.MAX_VALUE).addComponent(
                        txtCreatedDir,
                        javax.swing.GroupLayout.DEFAULT_SIZE,
                        323,
                        Short.MAX_VALUE)).addContainerGap()));
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                layout.createSequentialGroup().addContainerGap().addGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lblDistName)
                                .addComponent(
                                    txtDistName,
                                    javax.swing.GroupLayout.PREFERRED_SIZE,
                                    javax.swing.GroupLayout.DEFAULT_SIZE,
                                    javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(
                    javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lblOutDir)
                                .addComponent(
                                    txtOutDir,
                                    javax.swing.GroupLayout.PREFERRED_SIZE,
                                    javax.swing.GroupLayout.DEFAULT_SIZE,
                                    javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(btnBrowse)).addPreferredGap(
                    javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(
                        lblCreatedDir).addComponent(
                        txtCreatedDir,
                        javax.swing.GroupLayout.PREFERRED_SIZE,
                        javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.PREFERRED_SIZE)).addContainerGap(
                    javax.swing.GroupLayout.DEFAULT_SIZE,
                    Short.MAX_VALUE)));
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void btnBrowseActionPerformed(final java.awt.event.ActionEvent evt) //GEN-FIRST:event_btnBrowseActionPerformed
    {                                                                           //GEN-HEADEREND:event_btnBrowseActionPerformed
        final JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setMultiSelectionEnabled(false);
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setDialogType(JFileChooser.OPEN_DIALOG);
        chooser.setDialogTitle("Choose output directory");
        chooser.setFileFilter(new FileFilter() {

                @Override
                public boolean accept(final File f) {
                    return f.isDirectory();
                }

                @Override
                public String getDescription() {
                    return "Folders only";
                }
            });

        final int answer = chooser.showOpenDialog(this);

        if (JFileChooser.APPROVE_OPTION == answer) {
            EventQueue.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        txtOutDir.setText(chooser.getSelectedFile().getAbsolutePath());
                    }
                });
        }
    } //GEN-LAST:event_btnBrowseActionPerformed

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class CreatedDirUpdateListener implements DocumentListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void insertUpdate(final DocumentEvent e) {
            changedUpdate(e);
        }

        @Override
        public void removeUpdate(final DocumentEvent e) {
            changedUpdate(e);
        }

        @Override
        public void changedUpdate(final DocumentEvent e) {
            final StringBuilder sb = new StringBuilder(txtOutDir.getText());
            while ((sb.length() > 0) && (File.separatorChar == sb.charAt(sb.length() - 1))) {
                sb.deleteCharAt(sb.length() - 1);
            }

            sb.append(File.separatorChar);
            sb.append(txtDistName.getText());

            EventQueue.invokeLater(new Runnable() {

                    @Override
                    public void run() {
                        txtCreatedDir.setText(new File(sb.toString()).getAbsolutePath());
                    }
                });
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class NameDocument extends PlainDocument {

        //~ Methods ------------------------------------------------------------

        @Override
        public void insertString(final int offs, final String str, final AttributeSet a) throws BadLocationException {
            super.insertString(offs, str.replace(Matcher.quoteReplacement(File.separator), ""), a);
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class OutDirDocument extends PlainDocument {

        //~ Methods ------------------------------------------------------------

        @Override
        public void insertString(final int offs, final String str, final AttributeSet a) throws BadLocationException {
            final String content = txtOutDir.getText();

            String before = str;
            String after = str;
            do {
                before = after;
                after = before.replace(Matcher.quoteReplacement(File.separator + File.separator),
                        Matcher.quoteReplacement(File.separator));
            } while (after.length() != before.length());

            final StringBuilder sb = new StringBuilder(after);

            if ((File.separatorChar == sb.charAt(0)) && (offs > 0)
                        && (File.separatorChar == content.charAt(offs - 1))) {
                sb.deleteCharAt(0);
            }

            if ((sb.length() > 0)
                        && (File.separatorChar == sb.charAt(sb.length() - 1))
                        && (offs == content.length())
                        && (content.length() > 0)
                        && (File.separatorChar == content.charAt(content.length() - 1))) {
                sb.deleteCharAt(sb.length() - 1);
            }

            super.insertString(offs, sb.toString(), a);
        }
    }
}
