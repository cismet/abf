/*
 * KeystoreVisualPanel.java, encoding: UTF-8
 *
 * Copyright (C) by:
 *
 *----------------------------
 * cismet GmbH
 * Altenkesslerstr. 17
 * Gebaeude D2
 * 66115 Saarbruecken
 * http://www.cismet.de
 *----------------------------
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * See: http://www.gnu.org/licenses/lgpl.txt
 *
 *----------------------------
 * Author:
 * martin.scholl@cismet.de
 *----------------------------
 *
 * Created on 25. August 2007, 14:47
 */

package de.cismet.cids.abf.librarysupport.project.customizer;

import de.cismet.cids.abf.librarysupport.project.LibrarySupportProject;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;
import org.openide.util.ImageUtilities;
import org.openide.util.WeakListeners;

/**
 *
 * @author mscholl
 * @version 1.3
 */
public final class KeystoreVisualPanel extends javax.swing.JPanel
{
    private final transient PropertyProvider provider;
    private final transient DocumentListener docL;
    private final transient ImageIcon warning;
    
    /** Creates new form KeystoreVisualPanel */
    public KeystoreVisualPanel(final LibrarySupportProject project)
    {
        provider = PropertyProvider.getInstance(project.getProjectProperties());
        assert provider != null;
        docL = new DocumentListenerImpl();
        warning = new ImageIcon(ImageUtilities.loadImage(
                LibrarySupportProject.IMAGE_FOLDER
                + "warning_16.gif")); // NOI18N
        initComponents();
        init();
    }
    
    public void init()
    {
        final String mainKeyStore = provider.get(
                PropertyProvider.KEY_GENERAL_KEYSTORE);
        final String mainKStorePW = provider.get(
                PropertyProvider.KEY_GENERAL_KEYSTORE_PW);
        final Document doc = mainKeystoreTextField.getDocument();
        doc.addDocumentListener(WeakListeners.document(docL, doc));
        if(mainKeyStore == null)
        {
            mainKeystoreTextField.setText(org.openide.util.NbBundle.getMessage(
                    KeystoreVisualPanel.class, "KeystoreVisualPanel.mainKeystoreTextField.text.noKeystore")); // NOI18N
        }else
        {
            mainKeystoreTextField.setText(mainKeyStore);
        }
        passwordField.setText(mainKStorePW);
        validateEntry();
    }
    
    public void validateEntry()
    {
        final File file = new File(mainKeystoreTextField.getText());
        if(file.exists())
        {
            if(file.canRead())
            {
                errorLabel.setIcon(null);
                errorLabel.setText(""); // NOI18N
            }else
            {
                errorLabel.setIcon(warning);
                errorLabel.setText(org.openide.util.NbBundle.getMessage(
                        KeystoreVisualPanel.class,
                        "KeystoreVisualPanel.mainKeystoreTextField.text.keystoreUnreadable")); // NOI18N
            }
        }else
        {
            errorLabel.setIcon(warning);
            errorLabel.setText(org.openide.util.NbBundle.getMessage(
                    KeystoreVisualPanel.class,
                    "KeystoreVisualPanel.mainKeystoreTextField.text.keystoreNotExistant")); // NOI18N
        }
    }

    public String getMainKeystore()
    {
        return mainKeystoreTextField.getText();
    }

    public String getPassword()
    {
        return String.valueOf(passwordField.getPassword());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainKeystoreLabel.setText(org.openide.util.NbBundle.getMessage(KeystoreVisualPanel.class, "KeystoreVisualPanel.mainKeystoreLabel.text")); // NOI18N

        chooseButton.setText(org.openide.util.NbBundle.getMessage(KeystoreVisualPanel.class, "KeystoreVisualPanel.chooseButton.text")); // NOI18N
        chooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseButtonActionPerformed(evt);
            }
        });

        multipleKeystoreCheckBox.setText(org.openide.util.NbBundle.getMessage(KeystoreVisualPanel.class, "KeystoreVisualPanel.multipleKeystoreCheckBox.text")); // NOI18N
        multipleKeystoreCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        multipleKeystoreCheckBox.setEnabled(false);

        errorLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 204, 0));
        errorLabel.setText(org.openide.util.NbBundle.getMessage(KeystoreVisualPanel.class, "KeystoreVisualPanel.errorLabel.text")); // NOI18N

        passwordLabel.setText(org.openide.util.NbBundle.getMessage(KeystoreVisualPanel.class, "KeystoreVisualPanel.passwordLabel.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(errorLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(mainKeystoreLabel)
                            .add(passwordLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                    .add(org.jdesktop.layout.GroupLayout.LEADING, passwordField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE)
                                    .add(mainKeystoreTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 433, Short.MAX_VALUE))
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(chooseButton))
                            .add(multipleKeystoreCheckBox, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(mainKeystoreLabel)
                    .add(chooseButton)
                    .add(mainKeystoreTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(passwordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(passwordLabel))
                .add(30, 30, 30)
                .add(multipleKeystoreCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 145, Short.MAX_VALUE)
                .add(errorLabel)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chooseButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chooseButtonActionPerformed
    {//GEN-HEADEREND:event_chooseButtonActionPerformed
        final JFileChooser chooser = new JFileChooser();
        final File userhome = new File(System.getProperty("user.home"));//NOI18N
        chooser.setMultiSelectionEnabled(false);
        chooser.setCurrentDirectory(userhome);
        chooser.setDialogTitle(org.openide.util.NbBundle.getMessage(
                KeystoreVisualPanel.class, "KeystoreVisualPanel.chooseButtonActionPerformed(ActionEvent).chooser.dialogTitle")); // NOI18N
        chooser.setFileHidingEnabled(false);
        final int retVal = chooser.showOpenDialog(this);
        if(retVal == JFileChooser.APPROVE_OPTION)
        {
            mainKeystoreTextField.setText(chooser.getSelectedFile().
                    getAbsolutePath());
        }
    }//GEN-LAST:event_chooseButtonActionPerformed

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final transient javax.swing.JButton chooseButton = new javax.swing.JButton();
    private final transient javax.swing.JLabel errorLabel = new javax.swing.JLabel();
    private final transient javax.swing.JLabel mainKeystoreLabel = new javax.swing.JLabel();
    private final transient javax.swing.JTextField mainKeystoreTextField = new javax.swing.JTextField();
    private final transient javax.swing.JCheckBox multipleKeystoreCheckBox = new javax.swing.JCheckBox();
    private final transient javax.swing.JPasswordField passwordField = new javax.swing.JPasswordField();
    private final transient javax.swing.JLabel passwordLabel = new javax.swing.JLabel();
    // End of variables declaration//GEN-END:variables
    
    private class DocumentListenerImpl implements DocumentListener
    {
        @Override
        public void insertUpdate(final DocumentEvent documentEvent)
        {
            validateEntry();
        }

        @Override
        public void removeUpdate(final DocumentEvent documentEvent)
        {
            validateEntry();
        }

        @Override
        public void changedUpdate(final DocumentEvent documentEvent)
        {
            validateEntry();
        }
    }
}
