/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.abf.librarysupport.project.customizer;

import org.openide.util.ImageUtilities;
import org.openide.util.WeakListeners;

import java.io.File;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.Document;

import de.cismet.cids.abf.librarysupport.project.LibrarySupportProject;

import de.cismet.tools.PasswordEncrypter;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  1.3
 */
public final class KeystoreVisualPanel extends javax.swing.JPanel {

    //~ Instance fields --------------------------------------------------------

    private final transient PropertyProvider provider;
    private final transient DocumentListener docL;
    private final transient ImageIcon warning;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final transient javax.swing.JButton chooseButton = new javax.swing.JButton();
    private final transient javax.swing.JLabel errorLabel = new javax.swing.JLabel();
    private final transient javax.swing.JLabel mainKeystoreLabel = new javax.swing.JLabel();
    private final transient javax.swing.JTextField mainKeystoreTextField = new javax.swing.JTextField();
    private final transient javax.swing.JCheckBox multipleKeystoreCheckBox = new javax.swing.JCheckBox();
    private final transient javax.swing.JPasswordField passwordField = new javax.swing.JPasswordField();
    private final transient javax.swing.JLabel passwordLabel = new javax.swing.JLabel();
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form KeystoreVisualPanel.
     *
     * @param  project  DOCUMENT ME!
     */
    public KeystoreVisualPanel(final LibrarySupportProject project) {
        provider = PropertyProvider.getInstance(project.getProjectProperties());
        assert provider != null;
        docL = new DocumentListenerImpl();
        warning = new ImageIcon(ImageUtilities.loadImage(
                    LibrarySupportProject.IMAGE_FOLDER
                            + "warning_16.gif")); // NOI18N
        initComponents();
        init();
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * DOCUMENT ME!
     */
    public void init() {
        final String mainKeyStore = provider.get(
                PropertyProvider.KEY_GENERAL_KEYSTORE);
        final String mainKStorePW = PasswordEncrypter.decryptString(provider.get(
                    PropertyProvider.KEY_GENERAL_KEYSTORE_PW));
        final Document doc = mainKeystoreTextField.getDocument();
        doc.addDocumentListener(WeakListeners.document(docL, doc));
        if (mainKeyStore == null) {
            mainKeystoreTextField.setText(org.openide.util.NbBundle.getMessage(
                    KeystoreVisualPanel.class,
                    "KeystoreVisualPanel.mainKeystoreTextField.text.noKeystore")); // NOI18N
        } else {
            mainKeystoreTextField.setText(mainKeyStore);
        }
        passwordField.setText(mainKStorePW);
        validateEntry();
    }

    /**
     * DOCUMENT ME!
     */
    public void validateEntry() {
        final File file = new File(mainKeystoreTextField.getText());
        if (file.exists()) {
            if (file.canRead()) {
                errorLabel.setIcon(null);
                errorLabel.setText("");                                                        // NOI18N
            } else {
                errorLabel.setIcon(warning);
                errorLabel.setText(org.openide.util.NbBundle.getMessage(
                        KeystoreVisualPanel.class,
                        "KeystoreVisualPanel.mainKeystoreTextField.text.keystoreUnreadable")); // NOI18N
            }
        } else {
            errorLabel.setIcon(warning);
            errorLabel.setText(org.openide.util.NbBundle.getMessage(
                    KeystoreVisualPanel.class,
                    "KeystoreVisualPanel.mainKeystoreTextField.text.keystoreNotExistant"));    // NOI18N
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public String getMainKeystore() {
        return mainKeystoreTextField.getText();
    }

    /**
     * DOCUMENT ME!
     *
     * @return  DOCUMENT ME!
     */
    public String getPassword() {
        return String.valueOf(passwordField.getPassword());
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        mainKeystoreLabel.setText(org.openide.util.NbBundle.getMessage(
                KeystoreVisualPanel.class,
                "KeystoreVisualPanel.mainKeystoreLabel.text")); // NOI18N

        chooseButton.setText(org.openide.util.NbBundle.getMessage(
                KeystoreVisualPanel.class,
                "KeystoreVisualPanel.chooseButton.text")); // NOI18N
        chooseButton.addActionListener(new java.awt.event.ActionListener() {

                @Override
                public void actionPerformed(final java.awt.event.ActionEvent evt) {
                    chooseButtonActionPerformed(evt);
                }
            });

        multipleKeystoreCheckBox.setText(org.openide.util.NbBundle.getMessage(
                KeystoreVisualPanel.class,
                "KeystoreVisualPanel.multipleKeystoreCheckBox.text")); // NOI18N
        multipleKeystoreCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        multipleKeystoreCheckBox.setEnabled(false);

        errorLabel.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 204, 0));
        errorLabel.setText(org.openide.util.NbBundle.getMessage(
                KeystoreVisualPanel.class,
                "KeystoreVisualPanel.errorLabel.text"));               // NOI18N

        passwordLabel.setText(org.openide.util.NbBundle.getMessage(
                KeystoreVisualPanel.class,
                "KeystoreVisualPanel.passwordLabel.text")); // NOI18N

        final org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                layout.createSequentialGroup().addContainerGap().add(
                    layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                        errorLabel,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        616,
                        Short.MAX_VALUE).add(
                        layout.createSequentialGroup().add(
                            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                                mainKeystoreLabel).add(passwordLabel)).addPreferredGap(
                            org.jdesktop.layout.LayoutStyle.RELATED).add(
                            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                                layout.createSequentialGroup().add(
                                    layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(
                                        org.jdesktop.layout.GroupLayout.LEADING,
                                        passwordField,
                                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                        433,
                                        Short.MAX_VALUE).add(
                                        mainKeystoreTextField,
                                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                        433,
                                        Short.MAX_VALUE)).addPreferredGap(
                                    org.jdesktop.layout.LayoutStyle.RELATED).add(chooseButton)).add(
                                multipleKeystoreCheckBox,
                                org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                                509,
                                Short.MAX_VALUE)))).addContainerGap()));
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                layout.createSequentialGroup().addContainerGap().add(
                    layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(mainKeystoreLabel).add(
                        chooseButton).add(
                        mainKeystoreTextField,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(
                    org.jdesktop.layout.LayoutStyle.RELATED).add(
                    layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(
                        passwordField,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(passwordLabel)).add(30, 30, 30).add(
                    multipleKeystoreCheckBox).addPreferredGap(
                    org.jdesktop.layout.LayoutStyle.RELATED,
                    145,
                    Short.MAX_VALUE).add(errorLabel).addContainerGap()));
    } // </editor-fold>//GEN-END:initComponents

    /**
     * DOCUMENT ME!
     *
     * @param  evt  DOCUMENT ME!
     */
    private void chooseButtonActionPerformed(final java.awt.event.ActionEvent evt)                    //GEN-FIRST:event_chooseButtonActionPerformed
    {                                                                                                 //GEN-HEADEREND:event_chooseButtonActionPerformed
        final JFileChooser chooser = new JFileChooser();
        final File userhome = new File(System.getProperty("user.home"));                              // NOI18N
        chooser.setMultiSelectionEnabled(false);
        chooser.setCurrentDirectory(userhome);
        chooser.setDialogTitle(org.openide.util.NbBundle.getMessage(
                KeystoreVisualPanel.class,
                "KeystoreVisualPanel.chooseButtonActionPerformed(ActionEvent).chooser.dialogTitle")); // NOI18N
        chooser.setFileHidingEnabled(false);
        final int retVal = chooser.showOpenDialog(this);
        if (retVal == JFileChooser.APPROVE_OPTION) {
            mainKeystoreTextField.setText(chooser.getSelectedFile().getAbsolutePath());
        }
    }                                                                                                 //GEN-LAST:event_chooseButtonActionPerformed

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private class DocumentListenerImpl implements DocumentListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void insertUpdate(final DocumentEvent documentEvent) {
            validateEntry();
        }

        @Override
        public void removeUpdate(final DocumentEvent documentEvent) {
            validateEntry();
        }

        @Override
        public void changedUpdate(final DocumentEvent documentEvent) {
            validateEntry();
        }
    }
}
