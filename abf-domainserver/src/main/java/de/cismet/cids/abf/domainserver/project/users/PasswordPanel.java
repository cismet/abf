/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
package de.cismet.cids.abf.domainserver.project.users;

import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;
import org.openide.util.WeakListeners;

import java.awt.event.HierarchyEvent;
import java.awt.event.HierarchyListener;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.ImageIcon;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

import de.cismet.cids.abf.domainserver.project.DomainserverProject;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class PasswordPanel extends javax.swing.JPanel {

    //~ Static fields/initializers ---------------------------------------------

    private static final ImageIcon infoIcon = ImageUtilities.loadImageIcon(
            DomainserverProject.IMAGE_FOLDER
                    + "information-balloon.png", // NOI18N
            false);
    private static final ImageIcon warnIcon = ImageUtilities.loadImageIcon(
            DomainserverProject.IMAGE_FOLDER
                    + "exclamation.png", // NOI18N
            false);

    //~ Instance fields --------------------------------------------------------

    private final transient PasswordComponentModel model;
    private final transient DocumentListener pwDocL;
    private final transient DocumentListener pwMatchDocL;
    private final transient PropertyChangeListener modelChangeL;
    private final transient HierarchyListener valOnFocusGainedL;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblPwEnter;
    private javax.swing.JLabel lblPwRepeat;
    private javax.swing.JPasswordField pwfEnter;
    private javax.swing.JPasswordField pwfRepeat;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form PasswordPanel.
     *
     * @param  model  DOCUMENT ME!
     */
    public PasswordPanel(final PasswordComponentModel model) {
        this.model = model;
        this.modelChangeL = new ModelChangeL();

        this.putClientProperty("title", NbBundle.getMessage(PasswordPanel.class, "PasswordPanel.<init>.title")); // NOI18N

        initComponents();

        this.pwDocL = new PWDocL();
        this.pwMatchDocL = new PWMatchDocL();
        this.valOnFocusGainedL = new ValidateOnBecomeVisibleL();

        pwfEnter.getDocument().addDocumentListener(WeakListeners.document(pwDocL, pwfEnter.getDocument()));
        pwfRepeat.getDocument().addDocumentListener(WeakListeners.document(pwMatchDocL, pwfRepeat.getDocument()));
        model.addPropertyChangeListener(WeakListeners.propertyChange(modelChangeL, model));

        this.addHierarchyListener(WeakListeners.create(HierarchyListener.class, valOnFocusGainedL, this));
    }

    //~ Methods ----------------------------------------------------------------

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        pwfEnter = new javax.swing.JPasswordField();
        pwfRepeat = new javax.swing.JPasswordField();
        lblPwEnter = new javax.swing.JLabel();
        lblPwRepeat = new javax.swing.JLabel();
        lblMessage = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(300, 108));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(500, 108));
        setLayout(new java.awt.GridBagLayout());

        pwfEnter.setText(NbBundle.getMessage(PasswordPanel.class, "PasswordPanel.pwfEnter.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(pwfEnter, gridBagConstraints);

        pwfRepeat.setText(NbBundle.getMessage(PasswordPanel.class, "PasswordPanel.pwfRepeat.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(pwfRepeat, gridBagConstraints);

        lblPwEnter.setText(NbBundle.getMessage(PasswordPanel.class, "PasswordPanel.lblPwEnter.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblPwEnter, gridBagConstraints);

        lblPwRepeat.setText(NbBundle.getMessage(PasswordPanel.class, "PasswordPanel.lblPwRepeat.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(lblPwRepeat, gridBagConstraints);

        lblMessage.setText(NbBundle.getMessage(PasswordPanel.class, "PasswordPanel.lblMessage.text")); // NOI18N
        lblMessage.setMaximumSize(new java.awt.Dimension(500, 16));
        lblMessage.setMinimumSize(new java.awt.Dimension(0, 16));
        lblMessage.setPreferredSize(new java.awt.Dimension(0, 16));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(8, 8, 8, 8);
        add(lblMessage, gridBagConstraints);
    }                                                                                                  // </editor-fold>//GEN-END:initComponents

    //~ Inner Classes ----------------------------------------------------------

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class ValidateOnBecomeVisibleL implements HierarchyListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void hierarchyChanged(final HierarchyEvent e) {
            if (HierarchyEvent.SHOWING_CHANGED == e.getChangeFlags()) {
                // trigger validation
                model.isValid();
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class ModelChangeL implements PropertyChangeListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void propertyChange(final PropertyChangeEvent evt) {
            final Object newVal = evt.getNewValue();
            final String message = (newVal instanceof String) ? newVal.toString() : null;
            if (DefaultPasswordComponentModel.PROP_INFO_MESSAGE.equals(evt.getPropertyName())) {
                lblMessage.setIcon((message == null) ? null : infoIcon);
                lblMessage.setText(message);
            } else if (DefaultPasswordComponentModel.PROP_WARN_MESSAGE.equals(evt.getPropertyName())) {
                lblMessage.setIcon((message == null) ? null : warnIcon);
                lblMessage.setText(message);
            }
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class PWDocL implements DocumentListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void insertUpdate(final DocumentEvent e) {
            changedUpdate(e);
        }

        @Override
        public void removeUpdate(final DocumentEvent e) {
            changedUpdate(e);
        }

        @Override
        public void changedUpdate(final DocumentEvent e) {
            model.setPassword(pwfEnter.getPassword());
        }
    }

    /**
     * DOCUMENT ME!
     *
     * @version  $Revision$, $Date$
     */
    private final class PWMatchDocL implements DocumentListener {

        //~ Methods ------------------------------------------------------------

        @Override
        public void insertUpdate(final DocumentEvent e) {
            changedUpdate(e);
        }

        @Override
        public void removeUpdate(final DocumentEvent e) {
            changedUpdate(e);
        }

        @Override
        public void changedUpdate(final DocumentEvent e) {
            model.setPasswordMatch(pwfRepeat.getPassword());
        }
    }
}
