/***************************************************
*
* cismet GmbH, Saarbruecken, Germany
*
*              ... and it just works.
*
****************************************************/
/*
 *  Copyright (C) 2010 mscholl
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
/*
 * StringConfigAttrEditor.java
 *
 * Created on Oct 4, 2010, 9:38:21 AM
 */
package de.cismet.cids.abf.domainserver.project.configattr;

import org.apache.log4j.Logger;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.Format;
import org.jdom.output.XMLOutputter;

import org.openide.nodes.Node;
import org.openide.util.NbBundle;
import org.openide.util.WeakListeners;

import java.awt.EventQueue;

import java.io.StringReader;

import de.cismet.cids.jpa.entity.configattr.ConfigAttrEntry;
import de.cismet.cids.jpa.entity.configattr.ConfigAttrValue;

/**
 * DOCUMENT ME!
 *
 * @author   mscholl
 * @version  $Revision$, $Date$
 */
public class XMLConfigAttrEditor extends ConfigAttrEditor {

    //~ Static fields/initializers ---------------------------------------------

    private static final String PREFERRED_ID = "XMLConfigAttrEditor"; // NOI18N
    private static final transient Logger LOG = Logger.getLogger(XMLConfigAttrEditor.class);

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblKey;
    private javax.swing.JLabel lblValue;
    private javax.swing.JEditorPane txeValue;
    private javax.swing.JTextField txtKey;
    // End of variables declaration//GEN-END:variables

    //~ Constructors -----------------------------------------------------------

    /**
     * Creates new form StringConfigAttrEditor.
     *
     * @param  dataObject  DOCUMENT ME!
     */
    public XMLConfigAttrEditor(final Node dataObject) {
        super(dataObject);
        initComponents();
    }

    //~ Methods ----------------------------------------------------------------

    @Override
    protected void componentOpened() {
        initValues();
        txeValue.getDocument().addDocumentListener(WeakListeners.document(saveListener, txeValue.getDocument()));
    }

    @Override
    protected void componentActivated() {
        super.componentActivated();
        txeValue.requestFocus();
    }

    /**
     * DOCUMENT ME!
     *
     * @throws  IllegalStateException  DOCUMENT ME!
     */
    private void initValues() {
        // init jcomponents
        final ConfigAttrEntry entry = dataObject.getCookie(ConfigAttrEntryCookie.class).getEntry();
        if (entry.getKey() == null) {
            throw new IllegalStateException("entry does not contain a key: " + entry);   // NOI18N
        } else if (entry.getValue() == null) {
            throw new IllegalStateException("entry does not contain a value: " + entry); // NOI18N
        }

        txtKey.setText(entry.getKey().getKey());
        try {
            final SAXBuilder builder = new SAXBuilder(false);
            final Document doc = builder.build(new StringReader(entry.getValue().getValue()));
            final XMLOutputter out = new XMLOutputter(Format.getPrettyFormat());
            txeValue.setText(out.outputString((Element)doc.getRootElement().getChildren().get(0)));
        } catch (final Exception ex) {
            LOG.warn("cannot parse entry value: " + entry.getValue().getValue(), ex); // NOI18N
            txeValue.setText(entry.getValue().getValue());
        }
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        lblKey = new javax.swing.JLabel();
        txtKey = new javax.swing.JTextField();
        lblValue = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txeValue = new javax.swing.JEditorPane();
        txeValue.setContentType("text/xml");

        lblKey.setText(NbBundle.getMessage(XMLConfigAttrEditor.class, "XMLConfigAttrEditor.lblKey.text")); // NOI18N

        txtKey.setEditable(false);
        txtKey.setText(NbBundle.getMessage(XMLConfigAttrEditor.class, "XMLConfigAttrEditor.txtKey.text")); // NOI18N

        lblValue.setText(NbBundle.getMessage(XMLConfigAttrEditor.class, "XMLConfigAttrEditor.lblValue.text")); // NOI18N

        jScrollPane1.setViewportView(txeValue);

        final org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                layout.createSequentialGroup().addContainerGap().add(
                    layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                        jScrollPane1,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        360,
                        Short.MAX_VALUE).add(
                        layout.createSequentialGroup().add(lblKey).add(18, 18, 18).add(
                            txtKey,
                            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                            316,
                            Short.MAX_VALUE)).add(lblValue)).addContainerGap()));
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                layout.createSequentialGroup().addContainerGap().add(
                    layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(lblKey).add(
                        txtKey,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                        org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(18, 18, 18).add(lblValue).addPreferredGap(
                    org.jdesktop.layout.LayoutStyle.RELATED).add(
                    jScrollPane1,
                    org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                    190,
                    Short.MAX_VALUE).addContainerGap()));
    } // </editor-fold>//GEN-END:initComponents

    @Override
    void notifyDataObjectChanged() {
        EventQueue.invokeLater(new Runnable() {

                @Override
                public void run() {
                    initValues();
                    setModified(false);
                }
            });
    }

    @Override
    ConfigAttrEntry getEditorValue() {
        final ConfigAttrEntry entry = dataObject.getCookie(ConfigAttrEntryCookie.class).getEntry();

        final ConfigAttrValue newValue = new ConfigAttrValue();
        newValue.setValue("<root>" + txeValue.getText() + "</root>"); // NOI18N

        // apply compact xml format
        try {
            final SAXBuilder builder = new SAXBuilder(false);
            final Document doc = builder.build(new StringReader(newValue.getValue()));
            final XMLOutputter out = new XMLOutputter(Format.getCompactFormat());
            newValue.setValue(out.outputString(doc));
        } catch (final Exception e) {
            LOG.warn("cannot apply compact xml format for the editor value", e); // NOI18N
        }

        final ConfigAttrEntry newEntry = new ConfigAttrEntry();
        newEntry.setDomain(entry.getDomain());
        newEntry.setId(entry.getId());
        newEntry.setKey(entry.getKey());
        newEntry.setType(entry.getType());
        newEntry.setUser(entry.getUser());
        newEntry.setUsergroup(entry.getUsergroup());
        newEntry.setValue(newValue);

        return newEntry;
    }
}
